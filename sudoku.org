#+STARTUP: inlineimages
#+LANGUAGE: fr
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LaTeX_HEADER: \usepackage[x11names]{xcolor}
#+LaTeX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue4, citecolor = PaleGreen1, linkcolor = black}
#+LATEX_HEADER: \usepackage[left=1cm,right=1cm,top=2cm,bottom=2cm]{geometry}
#+TITLE: Diplôme Inter-Universitaire
#+SUBTITLE: Projet Sudoku
#+AUTHOR: Raoul HATTERER & Jean-Luc COSSALTER 
#+OPTIONS: toc:2


# * Ficher de configuration de tangle

#+BEGIN_SRC python :noweb yes :exports none  :tangle sudoku.py 
  # coding: utf-8
  # Jeu de Sudoku
  # Auteur : Raoul HATTERER

  # Pour debugger:
  # import pdb
  # pdb.set_trace()


  <<sudoku>>
#+END_SRC

#+RESULTS:
: None

# Placer =:noweb-ref sudoku= au début des blocs sources pour les inclure dans le fichier sudoku.py généré par =C-c C-v C-t= qui exécute la commande =org-babel-tangle=, qui écrit le corps de tous les blocs de code du présent fichier pour les écrire dans un fichier de destination (ici sudoku.py).






* Choix du niveau
  | niveau   | restant | pourcentage | minimum |
  |----------+---------+-------------+---------|
  | Beginner |      24 |          30 |       1 |
  | Easy     |      37 |          46 |       2 |
  | Medium   |      46 |          57 |       3 |
  | Hard     |      52 |          64 |       4 |
  | Extreme  |      57 |          70 |       5 |
  |----------+---------+-------------+---------|
  #+TBLFM: $3=round(100*$2/81) 

  - restant : numéros restant à placer (sur 81)
  - minimum : nombre minimum de numéros pour compléter les blocs de 9 numéros (ligne, colonne ou carré)

* Où le joueur doit-il prendre les chiffres à placer sur la grille?
 Chaque fois que le joueur doit prendre un symbole à placer sur la grille, il va le piocher dans un des 9 sacs contenant chacun des symboles identiques. 

** Sacs de chiffres (restant à placer sur la grille)

  Un sac contient des symboles identiques.

  #+begin_src python -n :session *my-python* :noweb-ref sudoku
    class sac:
        """
        Classe représentant un sac. Un sac contient des symboles identiques.

        Attributs:
        ---------
        symbole : symbole placé dans le sacs
        cardinal : nombre de symboles que le sac contient
        """
        def __init__(self, symbole):
            """
            Constructeur de sac contenant 9 symboles identiques
            """
            self.symbole = symbole
            self.cardinal = 9  # nombre d'éléments dans le sac

        def __repr__(self):
            """
            Représentation officielle d'un sac lorsque l'on tape son nom dans
            l'interpréteur.

            Le contenu du sac est renvoyé.
            """
            if self.cardinal == 0:
                return "sac vide"
            elif self.cardinal == 1:
                return "contient 1 chiffre {}".format(self.symbole)
            else:
                return "contient {} chiffres {}".format(self.cardinal,
                                                        self.symbole)


  #+end_src

  #+RESULTS:

** La pioche

   La pioche est composée de 9 sacs contenant chacun des symboles identiques tous différents: 1 sac avec que des "1", un autre avec que des "2", etc.

- À l'initialisation de la pioche, chaque sac contient  9 symboles identiques. 
- À l'initialisation de la grille, un certain nombre de ces symboles est prélevé dans la pioche pour les placer sur la grille.
- Au cours du jeu, tant qu'il reste des symboles dans la pioche, le joueur peut en piocher pour les placer sur la grille.

   #+begin_src python +n :results output :exports both :session *my-python* :noweb-ref sudoku
     class pioche():
         """
         Classe représentant 9 sacs contenant chacun des symboles identiques
         tous différents (1 sac avec que des "1", un autre avec que des "2", etc.)

         À l'initialisation de la grille, un certain nombre de ces symboles est
         prélevé pour les placer sur la grille.
         Au cours du jeu, tant qu'il reste des symboles dans un sac, le joueur peut
         en piocher pour les placer sur la grille.

         exemple:
         -------
         ma_pioche = pioche()
         print(ma_pioche)         # affiche la pioche (contenu des 9 sacs de pioche)
         print(ma_pioche.contenu) # affiche la pioche sous forme de liste
         print(ma_pioche[1])      # affiche le contenu du premier sac de pioche


         """
         NBR_SACS = 9

         def __init__(self):
             """
             Initialisation d'une liste contenant 9 sacs

             chaque sac contenant chacun 9 symboles identiques
             """
             self.contenu = [sac(numéro) for numéro in range(1, self.NBR_SACS+1)]

         def __getitem__(self, index):
             """
             Permet d'obtenir le contenu d'un sac dans la pioche avec:
             ma_pioche[index] # où index est compris entre 1 et NBR_SACS.
             """
             return self.contenu[index-1]

         def __setitem__(self, index, sac):
             """
             Permet d'écrire un sac dans la pioche.

             exemple:
             -------
             ma_pioche[9] = sac(9)
             """
             if index < self.NBR_SACS+1:
                 self.contenu[index-1] = sac
             else:
                 raise IndexError()

         def __len__(self):
             return self.NBR_SACS

         def __repr__(self):
             """
             Représentation de la pioche.

             Le contenu des 9 sacs est renvoyé.
             """
             affichage = ""
             for sac in self.contenu:
                 affichage += sac.__repr__() + "\n"
             return affichage


   #+end_src

   #+RESULTS:

* Cases et grille

  La grille comporte 81 cases.

** Définissons ce qu'est une case

  #+begin_src python +n :results output :exports both :session *my-python* :noweb-ref sudoku
    class case:
        """
        Classe représentant une case.

        Une case non vide a un `contenu`, le symbole qui est affiché quand on tape
        le nom de la case dans l'interpréteur.
        Une case vide à des prétendants (valeurs possibles de la case).

        exemple:
        -------
        ma_case = case()
        print(ma_case)
        """
        def __init__(self):
            self.contenu = None
            self.pretendants = [1, 2, 3, 4, 5, 6, 7, 8, 9]

        def __repr__(self):
            """
            Affichage d'une case.

            Lorsque l'on tape son nom dans l'interpréteur
            son `contenu` est affiché.
            """
            if self.contenu is None:
                return "0"    # "⛶"
            else:
                return "{}".format(self.contenu)

  #+end_src

  #+RESULTS:

** Construisons la grille

  #+begin_src python +n :results output :exports both :session *my-python* :noweb-ref sudoku
    class grille:
        """
        Classe représentant une grille de 9 x 9 cases.

        Chacune des 81 cases est accessible via un index allant de 0 à 80.

        exemple:
        -------
        ma_grille = grille()
        print(ma_grille)            # affiche la grille 9 x 9 cases
        print(ma_grille.contenu)    # affiche la grille sous forme de liste
        print(ma_grille[0]) # affiche la première case (son index est 0)

        options:
        -------
        Affichage en couleur (fonctionne uniquement dans le Terminal pas dans la
        console Python): ma_grille.affichage_en_couleur = True
        """

        COTÉ = 9
        NBR_CASES = COTÉ * COTÉ

        def __init__(self):
            liste_cases = list()
            for i in range(self.NBR_CASES):
                liste_cases.append(case())
                self.contenu = liste_cases

        def __getitem__(self, index):
            """
            Permet d'obtenir le contenu d'une case de la grille avec:
            ma_grille[index] # où index est compris entre 0 et NBR_CASES-1.
            """
            return self.contenu[index]

        def __setitem__(self, index, symbole):
            """
            Permet d'écrire dans le contenu d'une case de la grille.

            exemple:
            -------
            ma_grille[0] = 5
            """
            if index < self.NBR_CASES:
                self.contenu[index].contenu = symbole
            else:
                raise IndexError()

        def __len__(self):
            return self.NBR_CASES

        def __repr__(self):
            """
            Affichage d'une grille.

            Lorsque l'on tape son nom dans l'interpréteur
            son `contenu` est affiché sous forme d'une grille 9 x 9.
            """
            affichage = ""
            index = 0
            for une_case in self.contenu:
                affichage += une_case.__repr__()  # ajout de l'affichage d'une case
                if index % 27 == 26 and index < 80:
                    affichage += "\n\n"  # à faire toutes les 3 lignes
                elif index % 9 == 8:
                    affichage += "\n"  # sinon à faire toutes les lignes
                elif index % 3 == 2:
                    affichage += "  "   # sinon à faire toutes les 3 colonnes
                elif index % 9 in [0, 1, 3, 4, 6, 7]:
                    affichage += " "

                index += 1
            return affichage

        def remplir_case(self, index, valeur):
            """
            Rempli la case d'index compris entre 0 et 80 avec `valeur`.
            """
            if (self.écriture_autorisée(self, index)):
                self.__setitem__(index, valeur)
                self.réduire_prétendants
                self.réduire_sac

        def écriture_autorisée(self, index):
            return self.autorisation_colonne(index)\
                and self.autorisation_ligne(index)\
                and self.autorisation_carré(index)

        def autorisation_colonne(self, index):
            return True

        def autorisation_ligne(self, index):
            return True

        def autorisation_carré(self, index):
            return True

        def réduire_prétendants(self, index):
            pass

        def réduire_sac(self, index):
            pass

        def getcolonne(self, index):
            """
            Retourne le numéro de colonne de la case d'index compris entre 0 et 80.

            Les 9 colonnes sont numérotées de 1 à 9.
            """
            return index % 9 + 1

        def getligne(self, index):
            """
            Retourne le numéro de ligne de la case d'index compris entre 0 et 80.

            Les 9 lignes sont numérotées de 1 à 9.
            """
            return index//9 + 1

        def getbloc(self, index):
            """
            Retourne le numéro du bloc 3 x 3 auquel appartient la case d'index
            compris entre 0 et 80.

            Il y a 9 blocs 3 x 3 d'index compris entre 0 et 8.
            """
            return (self.getcolonne(index)-1)//3 + ((self.getligne(index)-1)//3)*3


  #+end_src

  #+RESULTS:

* Exemple de fonctionnement

  #+begin_src python +n :results output :exports both :session *my-python* :noweb-ref sudoku
    if __name__ == '__main__':
        # emacs: you will need to use a prefix argument (i.e. C-u C-c C-c)
        # to run the following:
        print("Jeu en développement (pas encore fonctionnel).")
        grille_sudoku = grille()
        print(grille_sudoku)
  #+end_src

  #+RESULTS:
  #+begin_example
  Jeu en développement (pas encore fonctionnel).
  0 0 0  0 0 0  0 0 0
  0 0 0  0 0 0  0 0 0
  0 0 0  0 0 0  0 0 0

  0 0 0  0 0 0  0 0 0
  0 0 0  0 0 0  0 0 0
  0 0 0  0 0 0  0 0 0

  0 0 0  0 0 0  0 0 0
  0 0 0  0 0 0  0 0 0
  0 0 0  0 0 0  0 0 0
  #+end_example
