#+STARTUP: inlineimages
#+LANGUAGE: fr
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LaTeX_HEADER: \usepackage[x11names]{xcolor}
#+LaTeX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue4, citecolor = PaleGreen1, linkcolor = black}
#+LATEX_HEADER: \usepackage[left=1cm,right=1cm,top=2cm,bottom=2cm]{geometry}
#+TITLE: Diplôme Inter-Universitaire
#+SUBTITLE: Projet Sudoku
#+AUTHOR: Raoul HATTERER & Jean-Luc COSSALTER 
#+OPTIONS: toc:1

* Choix du niveau
  | niveau   | restant | pourcentage | minimum |
  |----------+---------+-------------+---------|
  | Beginner |      24 |          30 |       1 |
  | Easy     |      37 |          46 |       2 |
  | Medium   |      46 |          57 |       3 |
  | Hard     |      52 |          64 |       4 |
  | Extreme  |      57 |          70 |       5 |
  |----------+---------+-------------+---------|
  #+TBLFM: $3=round(100*$2/81) 

  - restant : numéros restant à placer (sur 81)
  - minimum : nombre minimum de numéros pour compléter les blocs de 9 numéros (ligne, colonne ou carré)

* Sacs de chiffres restant à placer.

  #+begin_src python -n :session
    class sac:
        """
        Classe représentant un sac. Un sac contient de 0 à 9 numéros identiques.

        Un sac contient à l'origine 9 numéros identiques.
        À l'initialisation de la grille, un certain nombre de ces numéros est
        prélevé pour les placer sur la grille.
        Au cours du jeu, tant qu'il reste des numéros dans un sac, le joueur peut
        en piocher pour les placer sur la grille.
        """
        def __init__(self, numero):
            """
            Constructeur de sac contenant 9 numéros identiques
            """
            self.id = numero
            self.contenu = 9

        def __repr__(self):
            """
            Représentation d'un sac lorsque l'on tape son nom dans l'interpréteur.

            Le contenu du sac est renvoyé.
            """
            if self.contenu == 0:
                return "sac vide"
            elif self.contenu == 1:
                return "contient 1 chiffre {}".format(self.id)
            else:
                return "contient {} chiffres {}".format(self.contenu, self.id)


    def sacs_pleins():
        """
        Initialisation d'une liste contenant 9 sacs

        chaque sac contenant chacun 9 numéros identiques
        """
        liste_sacs = list()
        for i in range(1, 10):
            liste_sacs.append(sac(i))
        return liste_sacs


    liste_sacs = sacs_pleins()
  #+end_src

  #+RESULTS:

* Cases

  La grille comporte 81 cases.



#+begin_src python -n :results output :exports both
  class case:
      """
      Classe représentant une case.

      Chacune des 81 cases de la grille possède un identifiant `id` unique
      allant de 0 à 80.
      Une case non vide a un `contenu` qui est affiché quand on tape le nom
      de la case dans l'interpréteur.
      Une case vide à des prétendants (valeurs possibles de la case).
      """
      def __init__(self, numero):
          self.id = numero
          self.contenu = None
          self.pretendants = [1, 2, 3, 4, 5, 6, 7, 8, 9]

      def __repr__(self):
          """
          Représentation d'une case.

          Lorsque l'on tape son nom dans l'interpréteur
          son `contenu` est renvoyé.
          """
          if self.contenu is None:
              return "0"    #"⛶"
          else:
              return "{}".format(self.contenu)

  class grille:
      """
      Classe représentant une grille de 9 x 9 cases.
      """
      def __init__(self):
          NBR_CASES = 81
          liste_cases = list()
          for i in range(NBR_CASES):
              liste_cases.append(case(i))
          self.contenu = liste_cases

      def __repr__(self):
          """
          Représentation d'une grille.

          Lorsque l'on tape son nom dans l'interpréteur
          son `contenu` est renvoyé sous forme d'une grille 9 x 9.
          """
          repr = ""
          index = 0
          for une_case in self.contenu:
              repr += str(une_case.__repr__())
              if index%27 == 26 and index < 80:
                  repr += "\n--- --- ---\n"
              elif index%9 == 8:
                  repr += "\n"
              elif index%3 == 2:
                  repr += "|"
              index += 1
          return repr

  grille_sudoku = grille()
  print(grille_sudoku)
#+end_src

#+RESULTS:
#+begin_example
000|000|000
000|000|000
000|000|000
--- --- ---
000|000|000
000|000|000
000|000|000
--- --- ---
000|000|000
000|000|000
000|000|000

#+end_example
