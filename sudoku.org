#+STARTUP: inlineimages
#+LANGUAGE: fr
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LaTeX_HEADER: \usepackage[x11names]{xcolor}
#+LaTeX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue4, citecolor = PaleGreen1, linkcolor = black}
#+LATEX_HEADER: \usepackage[left=1cm,right=1cm,top=2cm,bottom=2cm]{geometry}
#+TITLE: Diplôme Inter-Universitaire
#+SUBTITLE: Projet Sudoku
#+AUTHOR: Raoul HATTERER & Jean-Luc COSSALTER 
#+OPTIONS: toc:1

* Choix du niveau
  | niveau   | restant | pourcentage | minimum |
  |----------+---------+-------------+---------|
  | Beginner |      24 |          30 |       1 |
  | Easy     |      37 |          46 |       2 |
  | Medium   |      46 |          57 |       3 |
  | Hard     |      52 |          64 |       4 |
  | Extreme  |      57 |          70 |       5 |
  |----------+---------+-------------+---------|
  #+TBLFM: $3=round(100*$2/81) 

  - restant : numéros restant à placer (sur 81)
  - minimum : nombre minimum de numéros pour compléter les blocs de 9 numéros (ligne, colonne ou carré)

* Sacs de chiffres restant à placer.

  #+begin_src python -n :session
    class sac:
        """
        Classe représentant un sac. Un sac contient des symboles identiques.

        Un sac contient à l'origine 9 symboles identiques.
        À l'initialisation de la grille, un certain nombre de ces symboles est
        prélevé pour les placer sur la grille.
        Au cours du jeu, tant qu'il reste des symboles dans un sac, le joueur peut
        en piocher pour les placer sur la grille.

        Attributs:
        ---------
        symbole : symbole placé dans le sacs
        cardinal : nombre de symboles que le sac contient
        """
        def __init__(self, symbole):
            """
            Constructeur de sac contenant 9 symboles identiques
            """
            self.symbole = symbole
            self.cardinal = 9  # nombre d'éléments dans le sac

        def __repr__(self):
            """
            Représentation d'un sac lorsque l'on tape son nom dans l'interpréteur.

            Le contenu du sac est renvoyé.
            """
            if self.cardinal == 0:
                return "sac vide"
            elif self.cardinal == 1:
                return "contient 1 chiffre {}".format(self.symbole)
            else:
                return "contient {} chiffres {}".format(self.cardinal, self.symbole)


    class pioche():
        """
        Classe représentant 9 sacs contenant chacun des symboles identiques
        tous différents (1 sac avec que des "1", un autre avec que des "2", etc.)

        exemple:
        -------
        ma_pioche = pioche()
        print(ma_pioche)            # affiche la pioche (contenu des 9 sacs de pioche)
        print(ma_pioche.contenu)    # affiche la pioche sous forme de liste
        print(ma_pioche.[1])        # affiche le contenu du premier sac de pioche


        """
        NBR_SACS = 9

        def __init__(self):
            """
            Initialisation d'une liste contenant 9 sacs

            chaque sac contenant chacun 9 symboles identiques
            """
            self.contenu = [sac(numéro) for numéro in range(1, self.NBR_SACS+1)]

        def __getitem__(self, index):
            """
            Permet d'obtenir le contenu d'un sac dans la pioche avec:
            ma_pioche[index] # où index est compris entre 1 et NBR_SACS.
            """
            return self.contenu[index-1]

        def __setitem__(self, index, sac):
            """
            Permet d'écrire un sac dans la pioche.

            exemple:
            -------
            ma_pioche[9] = sac(9)
            """
            if index < self.NBR_SACS+1:
                self.contenu[index-1] = sac
            else:
                raise IndexError()

        def __len__(self):
            return self.NBR_SACS

        def __repr__(self):
            """
            Représentation de la pioche.

            Le contenu des 9 sacs est renvoyé.
            """
            affichage = ""
            for sac in self.contenu:
                affichage += sac.__repr__() + "\n"
            return affichage


    pioche_sudoku = pioche()
    print(pioche_sudoku)
  #+end_src

  #+RESULTS:

* Cases et grille

  La grille comporte 81 cases.



#+begin_src python -n :results output :exports both
  class SDcolors:
      """
      Gestion basique de la couleur dans le Terminal

      Remarque: Toujours terminer par RESET pour revenir à la couleur de base.
      """
      RESET = '\033[0m'
      BOLD = '\033[1m'
      ITALIC = '\033[3m'
      UNDERLINE = '\033[4m'
      GREEN = '\033[5m'
      ORANGE = '\033[6m'
      RED = '\033[7m'
      BLACK = '\033[30m'
      BROWN = '\033[31m'
      LIGHTGREEN = '\033[32m'
      GOLD = '\033[33m'
      BLUE = '\033[34m'
      PURPLE = '\033[35m'
      CYAN = '\033[36m'
      SNOW = '\033[37m'
      BLACKBG = '\033[40m'
      REDBG = '\033[41m'
      GREENBG = '\033[42m'
      GOLDBG = '\033[43m'
      BLUEBG = '\033[44m'
      PURPLEBG = '\033[45m'
      CYANBG = '\033[46m'
      SNOWBG = '\033[47m'


  class case:
      """
      Classe représentant une case.

      Une case non vide a un `contenu` qui est affiché quand on tape le nom
      de la case dans l'interpréteur.
      Une case vide à des prétendants (valeurs possibles de la case).
      Une case a une `couleur` à choisir parmi `SDcolors`.

      exemple:
      -------
      ma_case = case()
      print(ma_case)
      """
      def __init__(self):
          self.contenu = None
          self.couleur = SDcolors.BLACK
          self.pretendants = [1, 2, 3, 4, 5, 6, 7, 8, 9]

      def __repr__(self):
          """
          Affichage d'une case.

          Lorsque l'on tape son nom dans l'interpréteur
          son `contenu` est affiché.
          """
          if self.contenu is None:
              return "0"    # "⛶"
          else:
              return "{}".format(self.contenu)


  class grille:
      """
      Classe représentant une grille de 9 x 9 cases.

      Chacune des 81 cases est accessible via un index allant de 0 à 80.

      exemple:
      -------
      ma_grille = grille()
      print(ma_grille)            # affiche la grille 9 x 9 cases
      print(ma_grille.contenu)    # affiche la grille sous forme de liste
      print(ma_grille[0]) # affiche la première case (son index est 0)

      options:
      -------
      Affichage en couleur (fonctionne uniquement dans le Terminal pas dans la
      console Python): ma_grille.affichage_en_couleur = True
      """

      NBR_CASES = 81

      def __init__(self):
          liste_cases = list()
          for i in range(self.NBR_CASES):
              liste_cases.append(case())
          self.contenu = liste_cases
          self.affichage_en_couleur = False
          self.couleur_grille = SDcolors.SNOWBG

      def __getitem__(self, index):
          """
          Permet d'obtenir le contenu d'une case de la grille avec:
          ma_grille[index] # où index est compris entre 0 et NBR_CASES-1.
          """
          return self.contenu[index]

      def __setitem__(self, index, symbole):
          """
          Permet d'écrire dans le contenu d'une case de la grille.

          exemple:
          -------
          ma_grille[0] = 5
          """
          if index < self.NBR_CASES:
              self.contenu[index].contenu = symbole
          else:
              raise IndexError()

      def __len__(self):
          return self.NBR_CASES

      def __repr__(self):
          """
          Affichage d'une grille.

          Lorsque l'on tape son nom dans l'interpréteur
          son `contenu` est affiché sous forme d'une grille 9 x 9.
          """
          affichage = ""
          index = 0
          if self.affichage_en_couleur :
              couleur_on = self.couleur_grille
              couleur_off = SDcolors.RESET
          else :
              couleur_on, couleur_off = "",""
          for une_case in self.contenu:
              affichage += une_case.__repr__()  # ajout de l'affichage d'une case
              if index % 27 == 26 and index < 80:
                  affichage += "\n"+couleur_on + " "*19 + couleur_off + "\n"  # à faire toutes les 3 lignes
              elif index % 9 == 8:
                  affichage += "\n"  # sinon à faire toutes les lignes
              elif index % 3 == 2:
                  affichage += couleur_on + "  " + couleur_off  # sinon à faire toutes les 3 colonnes
              elif index % 9 in [0, 1, 3, 4, 6, 7]:
                  affichage += " "
              index += 1
          return affichage

      def remplir_case(self, index, valeur):
          """
          Rempli la case d'index compris entre 0 et 80 avec `valeur`.
          """
          if self.autorisation_colonne(index) and self.autorisation_ligne(index) and self.autorisation_carré(index):
              self.__setitem__(index, valeur)
              self.réduire_prétendants
              self.réduire_sac

      def autorisation_colonne(self, index):
          return True


      def autorisation_ligne(self, index):
          return True

      def autorisation_carré(self, index):
          return True

      def réduire_prétendants(self, index):
          pass

      def réduire_sac(self, index):
          pass

      def colonne(self, index):
          """
          Retourne le numéro de colonne de la case d'index compris entre 0 et 80.

          Les 9 colonnes sont numérotées de 1 à 9.
          """
          return index % 9 + 1

      def ligne(self, index):
          """
          Retourne le numéro de ligne de la case d'index compris entre 0 et 80.

          Les 9 lignes sont numérotées de 1 à 9.
          """
          return index//9 + 1


  grille_sudoku = grille()
  print(grille_sudoku)
#+end_src

#+RESULTS:
#+begin_example

    Classe représentant une grille de 9 x 9 cases.

    Chacune des 81 cases est accessible via un index allant de 0 à 80.

    exemple:
    -------
    ma_grille = grille()
    print(ma_grille)            # affiche la grille 9 x 9 cases
    print(ma_grille.contenu)    # affiche la grille sous forme de liste
    print(ma_grille.contenu[0]) # affiche la première case (son index est 0)

    options:
    -------
    Affichage en couleur (fonctionne uniquement dans le Terminal pas dans la
    console Python): ma_grille.affichage_en_couleur = True
    
0 0 0  0 0 0  0 0 0
0 0 0  0 0 0  0 0 0
0 0 0  0 0 0  0 0 0
                   
0 0 0  0 0 0  0 0 0
0 0 0  0 0 0  0 0 0
0 0 0  0 0 0  0 0 0
                   
0 0 0  0 0 0  0 0 0
0 0 0  0 0 0  0 0 0
0 0 0  0 0 0  0 0 0

#+end_example


