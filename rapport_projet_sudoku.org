#+STARTUP: inlineimages
#+LANGUAGE: fr
#+LATEX_COMPILER: xelatex
#+LATEX_HEADER: \usepackage{fontspec}
#+LaTeX_HEADER: \usepackage{xunicode}

#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+LaTeX_HEADER: \usepackage[x11names]{xcolor}
#+LaTeX_HEADER: \hypersetup{linktoc = all, colorlinks = true, urlcolor = DodgerBlue4, citecolor = PaleGreen1, linkcolor = black}
#+LATEX_HEADER: \usepackage[left=1cm,right=1cm,top=2cm,bottom=2cm]{geometry}
#+TITLE: Diplôme Inter-Universitaire
#+SUBTITLE: Projet Sudoku
#+AUTHOR: Raoul HATTERER & Jean-Luc COSSALTER 
#+OPTIONS: toc:2

* Consignes
  Production d'un rapport de 20 pages maximum : expliquer l'interface homme-machine, expliquer le code, expliquer la démarche et les difficultés rencontrées, extraction d'activités NSI en séances (hors projets filés) en lien avec les compétences décrites dans le programme NSI de 
  Première.


* Interface homme-machine
** Au démarrage
   Au démarrage (figure [[fig:au_demarrage]]) la grille de Sudoku apparaît vide au centre de la fenêtre.
   Sur la gauche, la jauge de remplissage est vide.
   La pioche, au bas de la fenêtre, indique que neuf symboles de chaque sorte restent à placer sur la grille.

   Sur la droite, un bouton *Nouvelle partie* de couleur distinctive permet d'amorcer une nouvelle partie.

   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: au démarrage
   #+NAME:   fig:au_demarrage
   [[file:./images/au_demarrage.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

** Nouvelle partie
   La grille est tirée de façon aléatoire et secrète.
   La pioche, au bas de la fenêtre (figure [[fig:choix_du_niveau]]) est vide: elle indique que tous les symboles ont été placés sur la grille.
   Sur la gauche, la jauge de remplissage est pleine.
   Sur la droite, un curseur est apparu, il permet de choisir le niveau de difficulté. Un bouton *Commencer* de couleur distinctive permet au joueur de commencer la partie.
   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: choix du niveau
   #+NAME:   fig:choix_du_niveau
   [[file:./images/choix_du_niveau.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

** Début de partie 

   La grille pleine est vidée aléatoirement jusqu'à atteindre le niveau souhaité par le joueur. 
   La jauge de remplissage et la pioche se retrouvent partiellement remplies.
   La grille est révélée au joueur et les cases dors et déjà remplies sont gelées : le joueur ne peut ni les effacer ni les modifier.
   Sur la gauche, le chronomètre mis en marche décompte le temps qui s'écoule.  


   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: début de partie
   #+NAME:   fig:début_de_partie

   [[file:./images/debut_de_partie.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

** Placer un symbole sur la grille

   Pour placer un symbole sur la grille, le joueur commence par sélectionner le symbole qu'il souhaite placer soit en le choisissant sur la grille, soit en le choisissant dans la pioche. Le symbole sélectionné apparaît alors d'une couleur distinctive (figure [[fig:selectionner_un_symbole]]).

   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: sélectionner un symbole
   #+NAME:   fig:selectionner_un_symbole
   [[file:./images/selectionner_un_symbole.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

   Le joueur clique alors sur une case vide pour y placer le symbole.
   Si la case est susceptible d'accepter le symbole celui est placé (figure [[fig:placer_un_symbole]]). 
   La pioche et la jauge de remplissage évoluent en conséquence.

   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: placer un symbole
   #+NAME:   fig:placer_un_symbole
   [[file:./images/placer_un_symbole.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

** Effacer un symbole de la grille
   Pour effacer un symbole, le joueur sélectionne le  bouton d'effacement *X* à droite de la pioche. Ce bouton apparaît alors en rouge (figure [[fig:effacer_un_symbole]]).
   Ce bouton agit en bascule: si le joueur clique dessus une nouvelle fois, on sort du mode effacement. On peut aussi en sortir en sélectionnant un autre symbole.

   Quand le mode effacement est actif, à chaque fois que le joueur clique sur une case pleine de la grille, celle-ci est effacée.
   La pioche et la jauge de remplissage évoluent en conséquence.

   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: effacer un symbole
   #+NAME:   fig:effacer_un_symbole
   [[file:./images/effacer_un_symbole.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

** Menus

   En haut de la fenêtre se trouve la barre de menu qui comporte:
   - le menu fichier (figure [[fig:menu_fichier]]) qui permet notamment d'ouvrir un fichier (figure [[fig:ouvrir]]). Le format *sdk* n'est pas encore implémenté, il faut donc utiliser le format *csv*.
   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: menu fichier
   #+NAME:   fig:menu_fichier
   [[file:./images/menu_fichier.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: ouvrir un fichier
   #+NAME:   fig:ouvrir
   [[file:./images/ouvrir.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

   - le menu langue (figure [[fig:langue]]) permet de choisir la langue de l'interface parmi français, anglais (figure [[fig:anglais]]) et grec.

   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: choix de la langue
   #+NAME:   fig:langue
   [[file:./images/choix_langue.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: interface en anglais
   #+NAME:   fig:anglais
   [[file:./images/anglais.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

   - le menu afficher (figure [[fig:afficher]]) qui permet d'afficher les outils développeur (figure [[fig:outils]]) dont le *solveur*, le *chronomètre* et une fenêtre *À propos*.
   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: menu afficher
   #+NAME:   fig:afficher
   [[file:./images/menu_afficher.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link


   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: les outils sont affichés
   #+NAME:   fig:outils
   [[file:./images/outils.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

   Si le joueur renonce à remplir la grille et veut recourir au solveur, il doit cliquer sur *Recommencer* puis sur *Solveur*.

   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: victoire
   #+NAME:   fig:victoire
   [[file:./images/victoire.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

** Aides
   Le joueur peut activer des aides en cochant les cases aides à droite de la grille. 
   - l'aide =Grille= permet d'afficher les prétendants au survol des cases (figure [[fig:pretendants]]). Au départ toutes les cases admettent les neuf symboles comme prétendants. Puis les cases cousines dans la même ligne, colonne ou bloc 3x3 sont déduites.

   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: prétendants
   #+NAME:   fig:pretendants
   [[file:./images/pretendants.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link
  
   - l'aide =Pioche= permet d'indiquer les destinations envisageables pour les symboles de la pioche. Le bouton *Index cases* permet de révéler de façon transitoire les index des cases tant que le bouton de la souris est enfoncé.

   #+attr_html: :width 75%
   #+attr_latex: :width 400
   #+CAPTION: destinations
   #+NAME:   fig:destinations
   [[file:./images/destinations.png]]
   # # C-c C-x C-v toggle preview
   # # C-c C-o to follow link

* Le code

** Documentation
   Le code est documenté par /docstring/ python.  
   Par exemple, la classe ~Case~ à une documentation intégrée accessible  en tapant src_python[:exports code]{help(Case)} dans la console python.

   #+CAPTION: classe Case
   #+NAME:   prog:code_class_Case
   #+INCLUDE: "sudoku.py" src python -n 30 :lines "30-100"

   Il en va de même pour toutes les classes utilisées dans le programme:
   - la classe ~Case~ (extrait de programme [[prog:code_class_Case]])
   - la classe ~Grille~ qui utilise la classe ~Case~ (extrait de programme [[prog:code_class_Grille]]) tout en disposant d'attributs et de méthodes propres (extrait de programme [[prog:code_class_Grille_methodes]]).
   - la classe ~Watchdog~
   - la classe ~Sac~. Un sac contient des symboles identiques.
   - la classe ~Pioche~. Classe utilisant 9 sacs contenant chacun des symboles identiques tous différents (1 sac avec que des "1", un autre avec que des "2", etc.)

   Les fonctions sont elles aussi documentées par /docstring/.

   #+CAPTION: la classe Grille fait appel à la classe Case
   #+NAME:   prog:code_class_Grille
   #+INCLUDE: "sudoku.py" src python -n 208 :lines "208-233"
   #+CAPTION: attributs et méthodes de la classe Grille
   #+NAME:   prog:code_class_Grille_methodes
   #+INCLUDE: "sudoku.py" src python -n 123 :lines "123-164"

** Multiplateforme
   Python et tkinter sont théoriquement multiplateformes mais l'apparence est différente suivant la plateforme utilisée.
   Globalement tkinter fonctionne mieux sous Linux que sous Windows (on perd le changement d'aspect du bouton au survol de la souris) ou sous mac OSX (idem, de plus le ~background~ des boutons doit être obtenu de façon détournée et les fenêtre Toplevel sont mal gérées).

* Démarche

